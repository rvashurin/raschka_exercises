node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_42"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_41"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "#H;\326F\207\366?\177\352w\344\330&\243\277\327\014Ad\307V\302?\272\247.\030\304\235\372\277\'\n\320\200\242\273\324?\177\352w\344\330&\243\277\037\206\246+\353R\350\277\3734\373z&E\320\277\355\004+\375\224\361\361\277,\301mj=\313\364?1x\013T\330\332\344\277\201TS\027\360\331\241?\361\306\277\247\360%\340?;\237p\177\363\001\n@\027\002}\3263\352\313\277\357eu\322\302\013\001@E\206\343n\'\277\360?\375G\376\222\n\033\356\277\360\352>\361u3\377?4g\217\"7\243\363?\334\345\326\260\244\325\364\277,V\023\361\225k\322?\315\342\365V\026\026\347?\307\363q\210\267M\370\277\347\234t\232?\345\324\277\360\352>\361u3\377?/z\234J*-\262?\307\004\356\271X\205\331\277/z\234J*-\262?\327\014Ad\307V\302?\235\376+\006<\006\356?\315\'\3159\342\323\006@\037\206\246+\353R\350\277\3734\373z&E\320\277\3734\373z&E\320\277\315\342\365V\026\026\347?\355\004+\375\224\361\361\277\327\014Ad\307V\302?\316t\272\203\340\366\306?\255Jov/\266\353?,V\023\361\225k\322?\327\014Ad\307V\302?W2\212\227\001\252\302\2774g\217\"7\243\363?\327\014Ad\307V\302?\3734\373z&E\320\277\007rI\240\273[\331?\303 a\254\272\341\370\277\317\210\027\017\020\356\345?\347\234t\232?\345\324\277Q\020\2224\277:\340\277\317\210\027\017\020\356\345?\315\342\365V\026\026\347?\277\224!\360\320\023\274\277\334\345\326\260\244\325\364\277\347\331\302\277\324\373\335?\375G\376\222\n\033\356\277\307\004\356\271X\205\331\277\357 \236\357\366M\341?\361\327;\331\221]\361\277#H;\326F\207\366?\255Jov/\266\353?\r\224A\003\376\312\353\277\361\306\277\247\360%\340?\307\004\356\271X\205\331\277\334\345\326\260\244\325\364\277\177\352w\344\330&\243\277\327\014Ad\307V\302?\177\352w\344\330&\243\277\357I\217\211\\m\273?4g\217\"7\243\363?#H;\326F\207\366?\307\004\356\271X\205\331\277\347\331\302\277\324\373\335?\277<\324\236\034>\350?\327\014Ad\307V\302?\"u*\372I\033\367?A\304N\304\313\212\342\277\334\345\326\260\244\325\364\277\317\210\027\017\020\356\345?,V\023\361\225k\322?A\304N\304\313\212\342\277$\033L\262C\363\365?\177\352w\344\330&\243\277\361\306\277\247\360%\340?\371cq\205lw\375?\'\n\320\200\242\273\324?\313\306\202d\264\271\367\277\037\206\246+\353R\350\277\327\014Ad\307V\302?/\322\351\233\336\002\346\277\003&\0060\310\253\333?\037\206\246+\353R\350\277\177\352w\344\330&\243\277\267\270\252Ie\325\333\277\027\002}\3263\352\313\277\027\002}\3263\352\313\277\344\213\370h\236\255\363\277\177\352w\344\330&\243\277\'\n\320\200\242\273\324?#H;\326F\207\366?\335_I\322\214\316T\277\327\014Ad\307V\302?#\276\214\020\257\013\327?\375G\376\222\n\033\356\277\177\352w\344\330&\243\277\007rI\240\273[\331?\177\352w\344\330&\243\277\307\004\356\271X\205\331\277\337\324Z\177\003\236\343?\001\n\223=fO\374?\327\014Ad\307V\302?A\304N\304\313\212\342\277,V\023\361\225k\322?\361\306\277\247\360%\340?\361\306\277\247\360%\340?\307\004\356\271X\205\331\277\',\310\343\344*\347\277\177\352w\344\330&\243\277\027\002}\3263\352\313\277\375G\376\222\n\033\356\277\313\306\202d\264\271\367\2777\232\003\267\032J\307\277\307\004\356\271X\205\331\277/\322\351\233\336\002\346\277\247lg\331q%\336\277\366}]\221\2135\360\277\027\340\204s\361z\351\277\375G\376\222\n\033\356\277D\263\322\222*S\361?\307\004\356\271X\205\331\277\r\224A\003\376\312\353\277A\304N\304\313\212\342\2772\006EM\t\211\004\300#\276\214\020\257\013\327?\021V\326\255Y\377\371?\334\345\326\260\244\325\364\277C%\231\231\371\244\001\300\251\210\332\313\323\201\375\277\267\270\252Ie\325\333\277E\206\343n\'\277\360?A\304N\304\313\212\342\277\177\352w\344\330&\243\277\003&\0060\310\253\333?\r\224A\003\376\312\353\277\'\n\320\200\242\273\324?$\033L\262C\363\365?\307\004\356\271X\205\331\277A\304N\304\313\212\342\277\307\004\356\271X\205\331\277W2\212\227\001\252\302\277\307\004\356\271X\205\331\277\277\224!\360\320\023\274\277E\206\343n\'\277\360?\377\304.\261\236\323\262\277\347\234t\232?\345\324\277\'\n\320\200\242\273\324?D\263\322\222*S\361?A\304N\304\313\212\342\277\313\306\202d\264\271\367\277\307\363q\210\267M\370\277\r\224A\003\376\312\353\277\177\352w\344\330&\243\277\002\335\243\031c\273\373?\361\306\277\247\360%\340?\347\331\302\277\324\373\335?/z\234J*-\262?\321.9\307\t\306\344?A\304N\304\313\212\342\277\375G\376\222\n\033\356\277Q\020\2224\277:\340\277\3144\303\277\3612\000\300\377\304.\261\236\323\262\277/z\234J*-\262?\027\002}\3263\352\313\277\307\004\356\271X\205\331\277\027\002}\3263\352\313\277,V\023\361\225k\322?\177\352w\344\330&\243\277\361\306\277\247\360%\340?C%\231\231\371\244\001\300\027\002}\3263\352\313\277\037\206\246+\353R\350\2772\006EM\t\211\004\300\327\014Ad\307V\302?\377\304.\261\236\323\262\277\307\004\356\271X\205\331\2774g\217\"7\243\363?E\206\343n\'\277\360?\001\n\223=fO\374?\361\327;\331\221]\361\277\037\206\246+\353R\350\277\360\352>\361u3\377?\027\002}\3263\352\313\277\277<\324\236\034>\350?\007rI\240\273[\331?\272\247.\030\304\235\372\277\327\014Ad\307V\302?\307\004\356\271X\205\331\277\037\206\246+\353R\350\277\027\002}\3263\352\313\277\355\004+\375\224\361\361\277\307\004\356\271X\205\331\277W2\212\227\001\252\302\277\037\206\246+\353R\350\277\277<\324\236\034>\350?\353\350\267\n3\225\322\277D\263\322\222*S\361?\177\352w\344\330&\243\277<\r\261\3320{\362?\177\352w\344\330&\243\277\361\306\277\247\360%\340?7\314_\243\366\225\n@\334\345\326\260\244\325\364\277\307\004\356\271X\205\331\277\177\352w\344\330&\243\277\334\345\326\260\244\325\364\277\'\n\320\200\242\273\324?\027\002}\3263\352\313\277\341z|7\375u\342?\272\247.\030\304\235\372\277\360\352>\361u3\377?4g\217\"7\243\363?c\203:\320\315\021\003@\235\376+\006<\006\356?\307\004\356\271X\205\331\277\273\025os\001\027\003\300\361\306\277\247\360%\340?\3144\303\277\3612\000\300\3734\373z&E\320\277\375G\376\222\n\033\356\277$\033L\262C\363\365?=\340\301\266-\347\361?\357I\217\211\\m\273?E\206\343n\'\277\360?\255Jov/\266\353?\375G\376\222\n\033\356\277,\301mj=\313\364?\313\306\202d\264\271\367\277\355\004+\375\224\361\361\277A\304N\304\313\212\342\277\255Jov/\266\353?\313\306\202d\264\271\367\277\361\306\277\247\360%\340?\r\224A\003\376\312\353\277\232X\nNB.\357?\307\004\356\271X\205\331\277\313\306\202d\264\271\367\277\337\324Z\177\003\236\343?4g\217\"7\243\363?\227\3343\243\371\226\313?\317\210\027\017\020\356\345?7\232\003\267\032J\307\2774g\217\"7\243\363?\347\331\302\277\324\373\335?\275\226\262\346\"f\351?\311T\274]\345g\007@Ijp|\305b\341\277\355\004+\375\224\361\361\277Q\020\2224\277:\340\277=\340\301\266-\347\361?\375G\376\222\n\033\356\277\'\n\320\200\242\273\324?\'\n\320\200\242\273\324?\355\004+\375\224\361\361\277\'\n\320\200\242\273\324?\307\004\356\271X\205\331\277\366}]\221\2135\360\277\037\206\246+\353R\350\277\3734\373z&E\320\277\023\374\367eS\327\370?\"u*\372I\033\367?\037\206\246+\353R\350\277\027\002}\3263\352\313\2771x\013T\330\332\344\277\317\231\223@\261%\367\277\307\004\356\271X\205\331\277\257\360\220.)\216\352?\365\241\334\332\020C\357\277\'\n\320\200\242\273\324?#H;\326F\207\366?\315\342\365V\026\026\347?\353\222d\366\305\237\001@\337\324Z\177\003\236\343?k)\\\210\307\351\001@4g\217\"7\243\363?\307\004\356\271X\205\331\277\3144\303\277\3612\000\300\'\n\320\200\242\273\324?\027\002}\3263\352\313\277\366}]\221\2135\360\277\3144\303\277\3612\000\300\255Jov/\266\353?\307\004\356\271X\205\331\277\355\004+\375\224\361\361\277\361\306\277\247\360%\340?\344\213\370h\236\255\363\2774g\217\"7\243\363?\255Jov/\266\353?A\304N\304\313\212\342\277\272\247.\030\304\235\372\277\353\350\267\n3\225\322\277\3734\373z&E\320\277\277\224!\360\320\023\274\277A\304N\304\313\212\342\277\360\352>\361u3\377?A\304N\304\313\212\342\277\201TS\027\360\331\241?,V\023\361\225k\322?\177\352w\344\330&\243\277\252\244M\2765\336\354?\347\234t\232?\345\324\277\377\304.\261\236\323\262\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?<\352\337\200\214\326\366\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?<\352\337\200\214\326\366\277?\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371??\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371??\267\370\336\350z\327?\242\321^.@\230\315\277\327=\322\262>\002\371?\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371??\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\242\321^.@\230\315\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371??\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?\242\321^.@\230\315\277?\267\370\336\350z\327?<\352\337\200\214\326\366\277?\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277?\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327??\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277\327=\322\262>\002\371?p\304\253\206\224\211\352\277?\267\370\336\350z\327?p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277p\304\253\206\224\211\352\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\213KF\017\322\021\361\277\373\214\341\275\345\342\342?\010\367\244y\337\r\273?p?\341\321z\374\363?\277\002G\300\206%\351\277\370\313\234\351[?\354\277`\3044\273\217\025\341\277\3430\234\021\206r\336\277\331\257\234\020}\370\361?\224\365\022\266\253#\360\2779?\277\271\nk\356\277\016\375x\235-\306\340\277\373\214\341\275\345\342\342?J\223X\007\276\216\354\277\335\004\003\344i\201\361?\213\006{\327l\272\356\277/\314\276\001\314\320\361?\016\375x\235-\306\340\277\373\214\341\275\345\342\342?3V7\347\272\374\345?/\314\276\001\314\320\361?9?\277\271\nk\356\2779?\277\271\nk\356\277\227\264\235\255\234\362\370?\370\313\234\351[?\354\277\271\203\343\021;\375\331?\271\203\343\021;\375\331?\227\264\235\255\234\362\370?J\223X\007\276\216\354\277\016\375x\235-\306\340\277\010\367\244y\337\r\273?J\223X\007\276\216\354\277\220\343\275=\213\035\345\277\227\264\235\255\234\362\370?\267Xz\031\255\023\352\277\010\367\244y\337\r\273?~L\023\225\013w\362\277\315\017y\203\027\240\327\2779\204\212\361o\302\360\277\373\214\341\275\345\342\342?\353a\331-b\024\264\277\213KF\017\322\021\361\277\277\002G\300\206%\351\277\217\307\277\253\366]\345?J\223X\007\276\216\354\277\336\3156\365\316\t\357\277\264-\021!\037*\312\277C\233e\316t\366\303\277\t 67\017c\352\277^\022[M\377\233\332?\267Xz\031\255\023\352\277\033t\317\204\302\206\350\277\315\017y\203\027\240\327\277\000vi\2205Q\353\277\227\264\235\255\234\362\370?\277\002G\300\206%\351\277^\022[M\377\233\332?\373\214\341\275\345\342\342?\010\367\244y\337\r\273?\264-\021!\037*\312\277\320\023\317\262m\306\362\277,\205Ww\251\'\362\277\267Xz\031\255\023\352\277\370\313\234\351[?\354\277J\223X\007\276\216\354\277+wX.\337G\362?\334+\026\255\241D\326?\335\004\003\344i\201\361?\220\343\275=\213\035\345\277\370\313\234\351[?\354\277\334+\026\255\241D\326?\342\252y[\355l\345\277\373\214\341\275\345\342\342?\271\203\343\021;\375\331?\334+\026\255\241D\326?\373\214\341\275\345\342\342?v\345WI\376\347\347\2779\325\232\225\006%\325\277\335\004\003\344i\201\361?\342\252y[\355l\345\277\325#jN\365\367\357\277\227\264\235\255\234\362\370?\224\365\022\266\253#\360\277^\022[M\377\233\332?\373\214\341\275\345\342\342?\370\313\234\351[?\354\277\207\366\337;\345\210\361\277\322\025z\312\230Y\000@\342gh\000!\352\360\277^\022[M\377\233\332?p?\341\321z\374\363?\277\002G\300\206%\351\277A\230{\274M\032\371?\022\312\002\336\350t\351\277\370\313\234\351[?\354\2779?\277\271\nk\356\277~\217$\360\327\371\346\277J\223X\007\276\216\354\277\3430\234\021\206r\336\277=\034\002 )\316\344\277\3430\234\021\206r\336\277\3430\234\021\206r\336\277\341\201\350\235\275\027\266?\370\313\234\351[?\354\277A\230{\274M\032\371?/\314\276\001\314\320\361?\010\367\244y\337\r\273?\277\002G\300\206%\351\277\005\331\316\254\354\271\332\277\336\3156\365\316\t\357\277J\223X\007\276\216\354\277\315\017y\203\027\240\327\277=\034\002 )\316\344\277\315\017y\203\027\240\327\277\241\257z\370\014g\354\277^\022[M\377\233\332?\022\312\002\336\350t\351\277\3430\234\021\206r\336\277#\036\234+\234\230\347\277#\036\234+\234\230\347\2774\231HB\207\177\372?/\314\276\001\314\320\361?=\034\002 )\316\344\277J\223X\007\276\216\354\277p?\341\321z\374\363?A\230{\274M\032\371?\335\004\003\344i\201\361?\271\203\343\021;\375\331?\227\264\235\255\234\362\370?\224\365\022\266\253#\360\277J\223X\007\276\216\354\277p?\341\321z\374\363?,\310h\322u\252\346\277\013\337\317\363ms\003@\334+\026\255\241D\326?\207\3319\244\200<\256\277\322\025z\312\230Y\000@\322\025z\312\230Y\000@\335\004\003\344i\201\361?\225F#ZB\206\324\277\3430\234\021\206r\336\277\220\343\275=\213\035\345\2773V7\347\272\374\345?\224\365\022\266\253#\360\277A\230{\274M\032\371?J\223X\007\276\216\354\2774/$\036\2039\361\277\327\325C\274\205q\306\277\213\006{\327l\272\356\277J\223X\007\276\216\354\277p?\341\321z\374\363?0\225\362\0221Y\357\277\267Xz\031\255\023\352\277\370\313\234\351[?\354\277\331\257\234\020}\370\361?\267Xz\031\255\023\352\277\315\017y\203\027\240\327\277\213KF\017\322\021\361\277\321V\340\r:I\347\277/\314\276\001\314\320\361?\264-\021!\037*\312\277\315\017y\203\027\240\327\277\225F#ZB\206\324\277>\242$\326\301\323\335\277\330\344\256\"\177\233\346?,\310h\322u\252\346\277\010\367\244y\337\r\273?9?\277\271\nk\356\277+wX.\337G\362?\227\264\235\255\234\362\370?`\3044\273\217\025\341\277h\r8\230o\020\376?\334+\026\255\241D\326?\3430\234\021\206r\336\277\370\313\234\351[?\354\277A\230{\274M\032\371?5r5yO\274\345\277\3430\234\021\206r\336\277\370\313\234\351[?\354\277\3430\234\021\206r\336\277\322\025z\312\230Y\000@\373\214\341\275\345\342\342?\227\264\235\255\234\362\370?\010GI\000G&\377?=\034\002 )\316\344\277\271\203\343\021;\375\331?\342\252y[\355l\345\277J\223X\007\276\216\354\277\373\214\341\275\345\342\342?9?\277\271\nk\356\277C\233e\316t\366\303\277p?\341\321z\374\363?\325h5\206ZO\362\277\342\252y[\355l\345\277\334+\026\255\241D\326?\225F#ZB\206\324\277\177\nP\343\035\235\004@9?\277\271\nk\356\277\220\343\275=\213\035\345\277p?\341\321z\374\363?t\311Y\267i(\350?p?\341\321z\374\363?\022\312\002\336\350t\351\277\325#jN\365\367\357\277\217\307\277\253\366]\345?\370\313\234\351[?\354\2775r5yO\274\345\277\342\252y[\355l\345\277\213KF\017\322\021\361\277\336\3156\365\316\t\357\277=\034\002 )\316\344\277J\223X\007\276\216\354\277>\242$\326\301\323\335\277\227\264\235\255\234\362\370?p?\341\321z\374\363?u\274\306\213\316\222\270?\322\025z\312\230Y\000@\334+\026\255\241D\326?+wX.\337G\362?\334+\026\255\241D\326?p?\341\321z\374\363?\373\214\341\275\345\342\342?\213KF\017\322\021\361\277\224\365\022\266\253#\360\277^\022[M\377\233\332?\342\252y[\355l\345\277\253\030\341[E\211\004@\342\252y[\355l\345\277\177\nP\343\035\235\004@\267Xz\031\255\023\352\277p?\341\321z\374\363?5r5yO\274\345\277\334+\026\255\241D\326?W\032h\024\266\003\342\277=\034\002 )\316\344\277\217\307\277\253\366]\345?A\230{\274M\032\371?\271\203\343\021;\375\331?\227\264\235\255\234\362\370?\220\343\275=\213\035\345\277\322\025z\312\230Y\000@\220\343\275=\213\035\345\277\350z\013\" \231\002@\3430\234\021\206r\336\277p?\341\321z\374\363?\342\252y[\355l\345\277\335\004\003\344i\201\361?h\r8\230o\020\376?\370\313\234\351[?\354\277\373\214\341\275\345\342\342?9?\277\271\nk\356\2779?\277\271\nk\356\277\217\307\277\253\366]\345?J\223X\007\276\216\354\277\213KF\017\322\021\361\277\217\307\277\253\366]\345?\213\006{\327l\272\356\277J\223X\007\276\216\354\277\227\264\235\255\234\362\370?\213\006{\327l\272\356\277\334+\026\255\241D\326?\331\257\234\020}\370\361?\370\313\234\351[?\354\277\373\214\341\275\345\342\342?/\314\276\001\314\320\361?\370\313\234\351[?\354\277\267Xz\031\255\023\352\277\220\343\275=\213\035\345\277\330\344\256\"\177\233\346?\335\004\003\344i\201\361?\220\343\275=\213\035\345\277\252gF\350\260X\333\277~L\023\225\013w\362\277u\274\306\213\316\222\270?\005\331\316\254\354\271\332\277\016\375x\235-\306\340\277\225F#ZB\206\324\277\325#jN\365\367\357\277C\233e\316t\366\303\277\341\201\350\235\275\027\266?\373\214\341\275\345\342\342?^\022[M\377\233\332?\213\006{\327l\272\356\277\315\017y\203\027\240\327\277\005\331\316\254\354\271\332\277\227\264\235\255\234\362\370?\220\343\275=\213\035\345\277\177\nP\343\035\235\004@=\034\002 )\316\344\277\220\343\275=\213\035\345\277A\230{\274M\032\371?\350z\013\" \231\002@\235Z\024% \336\354\277\213\006{\327l\272\356\277\322\025z\312\230Y\000@\022\312\002\336\350t\351\277\322\025z\312\230Y\000@\325h5\206ZO\362\277J\223X\007\276\216\354\277\336\3156\365\316\t\357\277\013\337\317\363ms\003@`\3044\273\217\025\341\2775r5yO\274\345\277\336\3156\365\316\t\357\277,\310h\322u\252\346\277J\223X\007\276\216\354\277p?\341\321z\374\363?9?\277\271\nk\356\277\373\214\341\275\345\342\342?,\310h\322u\252\346\277\3430\234\021\206r\336\2779?\277\271\nk\356\277\3430\234\021\206r\336\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\3321\'q\265\004\353\277q\224\267G\330\347\256\277!\253\242\3652\363\334\277\327\007\374\202\232\360\363?\370\253\335h\274\313\313\277\3321\'q\265\004\353\277\004\277\215\366$\033\305\277v\314\226\355)>\321\277\313\rC/k\331\361?\363%\231\030\0243\357\277\266*\005<\356\206\355\277^\2466\322X\237\336\277q\224\267G\330\347\256\277\200\203-\031\005\t\365\277L?0h\272\'\347?\275~\301\365*\265\366\277Sj\031\303\230\365\002@^\2466\322X\237\336\277\346D\327\376\035T\344\277\250\273\241)\377\270\311?\327\007\374\202\232\360\363?\006\215\005`\271\260\361\277\027-\273M\333\260\354\277\010\360\337\321WM\374?#@k\333C\000\346\277\250\273\241)\377\270\311?\214\326\263\027\t\377\261?\327\007\374\202\232\360\363?\346D\327\376\035T\344\277^\2466\322X\237\336\277!\253\242\3652\363\334\277\341\205\343*\3622\364\277\005\306\264\343<9\325?\343\001\265\326\311\007\366?\230\220\226\372\234o\360\277\013L\3713\345\321\341\277q\224\267G\330\347\256\277\360\302\276\246u\226\324\277\006\215\005`\271\260\361\277q\224\267G\330\347\256\277\250\273\241)\377\270\311?\266*\005<\356\206\355\277\302=\265\311V\326\346\277\250\273\241)\377\270\311?\302=\265\311V\326\346\277<4\335\202\242.\352\2776\256\2302\372\225\335?\005\306\264\343<9\325?~\265\265\257ps\310\277N\324\370M\3134\320?`;\377\267i\254\347\277\247\264z<\347\232\331\277!\253\242\3652\363\334\277\316PeW\277%\340\277\374\365&~(6\372?\3321\'q\265\004\353\277q\224\267G\330\347\256\277j\271\346_\301\356\327\277j\271\346_\301\356\327\277B\301H\300b\345\326?\355\177\234~!J\366\277y/q_\310\332\353\277\3321\'q\265\004\353\277\230\220\226\372\234o\360\277j\271\346_\301\356\327\277L?0h\272\'\347?\214\326\263\027\t\377\261?}\'\024\267w\204\357?N\324\370M\3134\320?\316PeW\277%\340\277~\265\265\257ps\310\277\247\264z<\347\232\331\277\214\326\263\027\t\377\261?\214\326\263\027\t\377\261?q\224\267G\330\347\256\277\214\326\263\027\t\377\261?j\271\346_\301\356\327\277t\260S\3747`\277?\256A\346y\247Q\346?\302=\265\311V\326\346\277\363%\231\030\0243\357\277\313\rC/k\331\361?\363%\231\030\0243\357\277q\224\267G\330\347\256\277q\224\267G\330\347\256\277\363%\231\030\0243\357\277\200\203-\031\005\t\365\277\010\360\337\321WM\374?\250\273\241)\377\270\311?q\224\267G\330\347\256\277\313\rC/k\331\361?\302=\265\311V\326\346\2779\n\262\224\207\032\363?\344\257\016\031\rG\333\277T(O*\001]\356\277\266*\005<\356\206\355\277~\265\265\257ps\310\277<4\335\202\242.\352\277\360\302\276\246u\226\324\277\251IC\"\370\247\342\277\2356\223\224\217X\351\277\344\257\016\031\rG\333\277~\265\265\257ps\310\277\027-\273M\333\260\354\277E\004k\350\2661\365?\327\007\374\202\232\360\363?!\253\242\3652\363\334\277r\242\005\"\010$\317\277\212\310e=\331\302\301\277g\217\273q\246\332\360\277[|\013\344=\213\367\277j\271\346_\301\356\327\277\344\257\016\031\rG\333\277^\2466\322X\237\336\277\251IC\"\370\247\342\277\360\302\276\246u\226\324\277\302=\265\311V\326\346\277\2356\223\224\217X\351\277~\265\265\257ps\310\277~\265\265\257ps\310\277\010\360\337\321WM\374?\327\007\374\202\232\360\363?j\271\346_\301\356\327\277\346D\327\376\035T\344\277}\'\024\267w\204\357?]\021\324\311N\230\360?\337)\312\310d\256\356?\374\365&~(6\372?\024\352\230%\207d\376?\3321\'q\265\004\353\277j\271\346_\301\356\327\277\327\007\374\202\232\360\363?\302=\265\311V\326\346\277;]\260\341\000\217\007@!\253\242\3652\363\334\277\205B!\3550*\345\277\024\352\230%\207d\376?\327\007\374\202\232\360\363?}\'\024\267w\204\357?\214\326\263\027\t\377\261?\346D\327\376\035T\344\277\250\273\241)\377\270\311?\250\273\241)\377\270\311?\3321\'q\265\004\353\277@,\200\332Q\330\355?j\271\346_\301\356\327\277\200\203-\031\005\t\365\277\212\310e=\331\302\301\277\3321\'q\265\004\353\277\346D\327\376\035T\344\277e3\242\017\031V\353?#@k\333C\000\346\277`;\377\267i\254\347\277\027-\273M\333\260\354\277L?0h\272\'\347?\230\220\226\372\234o\360\277\360\302\276\246u\226\324\277\244\212ON\314\206\362\277\263\307*\312O\352\322\277\327\007\374\202\232\360\363?\211:\304D\340\323\350?\360\302\276\246u\226\324\277\264\316Q\267g\010\303?\251IC\"\370\247\342\277!\253\242\3652\363\334\277\013L\3713\345\321\341\277!\253\242\3652\363\334\277\260\204\010\242\373\235\364\277L?0h\272\'\347?\313\rC/k\331\361?~\265\265\257ps\310\277\010\360\337\321WM\374?q\224\267G\330\347\256\277-\276R\203\233B\326\277\251IC\"\370\247\342\277\010\t\327\013\221\205\363?v\314\226\355)>\321\277v\314\226\355)>\321\277\360\302\276\246u\226\324\277\316PeW\277%\340\277N\324E\337\307\261\n@q\224\267G\330\347\256\277\343\001\265\326\311\007\366?\035\354a\220\nU\002@\344\257\016\031\rG\333\277\005\306\264\343<9\325?\212\310e=\331\302\301\277\006\215\005`\271\260\361\277\214\326\263\027\t\377\261?\3321\'q\265\004\353\277\250\273\241)\377\270\311?5\340\3237i\203\006@\363%\231\030\0243\357\277\212\310e=\331\302\301\277q\224\267G\330\347\256\277\214\326\263\027\t\377\261?HWi50\246\t@\027-\273M\333\260\354\277N\324\370M\3134\320?\327\007\374\202\232\360\363?4K\276\300[\371\342?\327\007\374\202\232\360\363?\360\302\276\246u\226\324\277\363%\231\030\0243\357\277\250\273\241)\377\270\311?HG\215\020\013~\343\277q\224\267G\330\347\256\277HG\215\020\013~\343\277\266*\005<\356\206\355\277\006\215\005`\271\260\361\277\004\277\215\366$\033\305\277v\314\226\355)>\321\277<4\335\202\242.\352\277\313\rC/k\331\361?\327\007\374\202\232\360\363?\212\310e=\331\302\301\277\327\007\374\202\232\360\363?\214\326\263\027\t\377\261?)\346\032\3449l\004@q\224\267G\330\347\256\277\327\007\374\202\232\360\363?\2356\223\224\217X\351\277\266*\005<\356\206\355\277\200\203-\031\005\t\365\277\360\302\276\246u\226\324\277j\271\346_\301\356\327\277A\332\214\213\230\232\010@j\271\346_\301\356\327\277HWi50\246\t@\3321\'q\265\004\353\277\327\007\374\202\232\360\363?lN\257E\322\373\340\277\250\273\241)\377\270\311?\216\362O\314hw\222?!\253\242\3652\363\334\277\250\273\241)\377\270\311?Q\376#<\346H\367?\214\326\263\027\t\377\261?\374\365&~(6\372?\213\317\214*\361\340\321?\327\007\374\202\232\360\363?#@k\333C\000\346\277Z\347\365l0\001\004@\302=\265\311V\326\346\277}\'\024\267w\204\357?`;\377\267i\254\347\277\242.6\354>\002\355?\020\362\250<\333=\000@\3321\'q\265\004\353\277!\244{\010\033\325\274\277\266*\005<\356\206\355\277\260\204\010\242\373\235\364\2776\256\2302\372\225\335?j\271\346_\301\356\327\277\244\212ON\314\206\362\277~\265\265\257ps\310\277\275~\301\365*\265\366\277\346D\327\376\035T\344\277\020\362\250<\333=\000@\3321\'q\265\004\353\277\360\302\276\246u\226\324\277}\'\024\267w\204\357?\027-\273M\333\260\354\277j\271\346_\301\356\327\277\327\007\374\202\232\360\363?\316PeW\277%\340\277\302=\265\311V\326\346\277\250\273\241)\377\270\311?\250\273\241)\377\270\311?L?0h\272\'\347?\266*\005<\356\206\355\277#@k\333C\000\346\277\212\310e=\331\302\301\277\360\302\276\246u\226\324\2776\256\2302\372\225\335?^\2466\322X\237\336\277v\314\226\355)>\321\277\363%\231\030\0243\357\277\005\306\264\343<9\325?~\265\265\257ps\310\277\2356\223\224\217X\351\277\360\302\276\246u\226\324\277\275~\301\365*\265\366\277\360\302\276\246u\226\324\277\266*\005<\356\206\355\277\214\326\263\027\t\377\261?!\244{\010\033\325\274\277HWi50\246\t@\344\257\016\031\rG\333\277\251IC\"\370\247\342\277v\005Fq\255\306\364?Z\347\365l0\001\004@y/q_\310\332\353\277\302=\265\311V\326\346\277\035\354a\220\nU\002@\2356\223\224\217X\351\277\035\354a\220\nU\002@\363%\231\030\0243\357\277\266*\005<\356\206\355\277<4\335\202\242.\352\277;]\260\341\000\217\007@~\265\265\257ps\310\277\212\310e=\331\302\301\277g\217\273q\246\332\360\277\360\302\276\246u\226\324\277[|\013\344=\213\367\277\327\007\374\202\232\360\363?\266*\005<\356\206\355\277\250\273\241)\377\270\311?\302=\265\311V\326\346\277j\271\346_\301\356\327\277y/q_\310\332\353\277j\271\346_\301\356\327\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\364\035\226V\337Z\360\277\'5\202\354\210\005\336?T\023\3407 h\332\277\206\362\006\241*\254\341?H\241\251\251\312\034\345\277\257\246\205\341\367\365\356\2778)\237=>\251\321\277\274&\307n\'\214\333\277\221\020b\004-\373\361?\322W}\236OW\357\277\253\252\322g\034\235\364\277\255\014\271\221I\344\340\277\362\2261PT\031\360?\214\365\215$\240\224\356\277\3777\346%\201\312\361?\001\277J,\014\014\362\277wxf\356\374\026\001@MZUmft\345\277d\216\365\013\252S\350?\311J\027\251Bg\365?b\346\035\275!\367\342?\202\345=\300w\220\365\277\333\203\004\372\rU\362\277\276\254+IOf\367?\366cf\202X\014\356\277\031\246\343\251\226~\362?^\210c 7\363\340?\207\271\263%\256\306\000@\367\276W\251\t`\354\277hA\254\370,\037\337\277\265`<\265\312\366\260?y\307\301c\223\335\351\277B@\005\236\304\004\324\277\320\253\232\273f\033\373?\346\223T^6Y\353\277\260\364v\031\006\250\267?\240\344~\274\257\215\343\277|0\235\220<\030\324\277\307G-:\'S\366\277\222Y=\230\243$\332?\255\276;\023\2413\212?\'\372\220^\n\303\361\2779\036~\255\177r\351\277\032\300@\3665B\356?\3458c7\205\005\355\277\271\322\014=\266\363\361\277)\375z\315%\327\360?\203\221 \243`\314\331\277\274\201\331\216\272C\345\277\023l\275\322\264/\276\277\275\316\277\266\221L\354\277\010Pm\253L\361\323\277\350YB\0039\032\270\277`-0\007\302\327\353\277\356\376\327\333\323x\371?~\200m\'/5\352\277\250\370\372\255\032\325\326\277\004\324{\277\005%\317?$\220\265\005\376 \303?\023\342\332\340\304\323\244\277\264\355\314\240^J\364\277\037\004}M\237\036\371\277\232\035\310\3719\353\353\277B\303\177\t\321\312\360\277\214\365\215$\240\224\356\277q\266/\341C\252\345?\020\267\345\224\2111\343?\021\260\317\230+\332\371?\032\216e\274\333%\264\277\345!\360Y\001V\360\277,\207\311B\314,\360?n->\006Z<\253?\232\272\300\252\307\330\337?y%\276\362A\251\342?\"/\317\0074A\353?V\031\325\0169\364\343?>/1)\261\t\331\277\271~\020\031\201\223\341\277\322\020\214M\221\332\321?\214M\225\3345\324\335\277\023E?\236\220f\361\277[py\257\305\240\374?\223\227\306\n\270<\362\277\327\273,\022S\347\332?\275\306\251\216\320\215\336?*\251]\260\016\023\345\277\024\222%\306go\370\277\246\366\246Y={\000@!E\360.\317J\320\277I\221\303|\225\236\230\277S\017\366\234\241\354\366?\222\274D\347\0257\346\277V\014\026lx`\000@\241?p\343`\341\341\277\202\345=\300w\220\365\277$pB\351cm\362\277\t\253^\322\375D\322\277\026H\010\024\312\026\365\277V\026\312\246;|\351\277\033\331K\214\354_\342\277\310N\"=\243F\344\277y*\311\262\005\360\305\277\317\332\334\215\306d\242\277\373\034\022F\364c\356\277\263:\324\301\027\267\366?\367A\322\024\026&\371?\257T\224\371\\\246\304?\353\377\031\372\372\247\344\277\036?\034Q\230\"\302\277Q\277%\006\257\317\360\277\205o\2145\036\346\364\277.\001#v\340\212\315\277U\273\330\177\212(\353\277n\010c\273\242\301\326\277\001\326\275\t\220\273\356\277[zy\032?\014\325?\tEL\033\216\272\353\277S\270\356\020o\024\334\277\277\204\242\004\364\363\350\277\023j\275z\356`\345\277@\022\035q+Y\000@\204\211\n{\237\r\354?\213[\301\324\361\202\340\277@2\033\230\314\035\350\277\353\373\016f\232\310\365?qb3\275\016J\365?\360\255\305&\272,\350?\277\207\255l\361k\343?\016\255\006#\362)\366?.\016.IWn\360\277\214\365\215$\240\224\356\277\371#I;4\037\363?a\210!.s+\352\277\027i{\\\3071\372?\004\352\234\346\240.\344?e\351\3462[\247\346?\014T\253B\342\367\004@\237\313s&\371o\357?3h\335Q\341\222\343?\356e\352\276\246j\304\2772b\350z\310\006\332\277\301\222\214\n\354\332\324\277\252\376\357\2043a\340?G!:\246\273\316\362\277\323\350\002\t6h\363?\364\010u[\247\270\357\277\001\277J,\014\014\362\277\203\266\373\355\027G\256?\273\001j\213\253\365\362\277\217\rx\225\021\347\362\277\272\325\366\253\321\007\361?w\372k8\255\206\360\277J\253\210\033b$\362\277\231\253c\365\004\350\360\277K\256r\212}8\361?\036\316\t\003L\305\356\277\253\256\335\373||\323\277\026H\010\024\312\026\365\277w\304\327\364w\311\332\277\204\211\n{\237\r\354?\321\237\277\"\222|\235\277^*F\230\246\303\334\277\241\\M\223\213\232t\277\254N\300\033&~\326?i7\226x\245\221\270?U\273\330\177\212(\353\277\000\024\305\343\337\267\242?\312\321{\257\315\250\365\277\361\264\272)6 \366?\010\364Z_V\322\365?vi\346\315\306u\334\277$\345\261U\226\350\347?Z\037\210\363\215\270\326?^\332T\010\322B\313\277\260\001w\010\251I\355\277e\016e\017\271\241\372?\tSW\032h\005\343\277\323\320\204\033{\017\265\2779\036~\255\177r\351\277\206G\003\361\302s\326\277)\357o\316K\214\371?{\032\235b\203r\332?\340{\254\337\210\316\375?\335\206\356h)i\361?w\037\352\024\013\201\344\277\024b\247R-\242\327?\334\212\371\374\211H\340\277\224k22\374\352\364\277\210\315g\313\352M\362?\265H\276\307\017\236\362\277\376\'\361\343\356\322\317\277\020U\336qz\206\373?ws\3468@\341\364\277\312\004\005\213\005\356\340\277\300\324\223\224\310t\352?\350\2363\3740\310\314\277\256\310e\177\360+\003@\001\277J,\014\014\362\277#\304d\205V\002X\277\n#\270\255K\324\366?\351\231(<m\201\351?\270\246\231]\334\005\360?}3\207\377W,\343\277\223\227\306\n\270<\362\277\215\216\206%\241\344\240?[\317uj\327\323\351\277\371\314A\257\001G\330\277\264jR5R\204\327\277Ah\216\342\037w\362\277\370{P\363\311^\362\277@2\033\230\314\035\350\277\234\323\252G\234\222\350\277\227\305\0024hs\323?\200^\331\271\354N\365?\325\220\332W\276\304\370?\2751\307\005\004_\310\277\267\021\t_\225\025\375?\321Z\210\006M\317\351?\271l\372\205Fi\373?\013\3769\321\355\331\342?\271\316\001\251U\024\343?E\356\321\303e\355\342?\3764\374\266e\266\362\277+\204\337\323\260\030\361\277\236&\206F\214\'\331?%\342\246\355\230p\355\277y\303\266\3172\376\372?\357\n\222{\306\263\233?\201\253\277\341\303W\374?G\223\236\252\360\321\355\277*Ja\365\374\337\367?!E\360.\317J\320\277\235#\234\327p\023\352?\2350\234\306\023\265\277\277\035\201#\333t\274\347\277\372\304+\207@\210\352?\374\237\214\261\000*\373?\366\301b\021\007\330\346?\347\343E\356\n\332\354?\276)\261\335B\240\352\277\375mO2\342\233\003@K\262}\036\336\027\340\277\266\306\270}_.\003@\214M\225\3345\324\335\277\253\230\274\324\341r\356?n\010c\273\242\301\326\277\303\221k\345\246\017\365?\313\300\261x\2545\003@\036\316\t\003L\305\356\277\324\020kT\257v\346?p\346\316M`\333\361\277\312\321{\257\315\250\365\277\305\233JW>\027\342?\242\214V\0138\352\350\277\0204k)}k\366\277E\226\312\013\320\255\323?FF\270\202\031\311\346\277\275\316\277\266\221L\354\277\264\207\272\351\356\277\375?\273\001j\213\253\365\362\277{\200\257\031\363\374\340?\225\347\226\241\252Y\370?\266\272\"\314D\241\355\277\335\274\3246\344d\272??\341)\334\2245\362?r\263$yF2\353\2772\n\341\3022\307\352\277a\340(\346\010k\331\277\241\334h\224\356\316\325? \254u\225\t\337\371?\201\361\030YL/\223?\307\2364\306Y+\321?\330\0364a\305\371\346\277{\325\253i\213\304\325\277\241\\M\223\213\232t\277\321\n\227vxN\350\277\311\363\017\035\020\217\332\277\322W}\236OW\357\277\254\t\317\".\320\321\2777c\220\237Y\204\311?S\276\004\341i\004\321?\177{bgk\356\306?TIt{U%\360\277\201\361\030YL/\223?6\023\237\017\205\003\330?\211\347\304\027\212\021\356?\255\276;\023\2413\212?\363[\222L[\025\307?\246\352\020\250\"\356\352\277|0\235\220<\030\324\277\225\347\226\241\252Y\370?\274\366H\373\354\276\372?\332\306\013\260MV\354\277\036\316\t\003L\305\356\277U\267\315\353)I\374?b\343\022U$\177\350\277\3245\3510\rq\372?\n{\277e\341\023\366\277\331k\032\211\234\002\356\277i\3221c\0230\363\277\215r_\351I\036\001@\256\243\233r\334\341\337\277Tn\362W\263\037\344\277\364\226\020Wr\265\364\277X\276\241\365\303\330\356\277\3764\374\266e\266\362\277\300\007\035p\000\272\365?$pB\351cm\362\277C8\357u\003F\346?_\322>\340\020\204\355\277I\014\246\'\034\212\263\277\214\365\215$\240\224\356\277!E\360.\317J\320\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\000\000\000\000\000\000>@\000\000\000\000\000\0001@\000\000\000\000\000\0005@\000\000\000\000\000\000.@\000\000\000\000\000\0006@\315\314\314\314\314\014@@\000\000\000\000\000\0008@\000\000\000\000\000\0009@\000\000\000\000\000\2001@ffffffD@\315\314\314\314\314LF@333333;@\000\000\000\000\000\0000@\000\000\000\000\000\000F@\000\000\000\000\000\000*@\315\314\314\314\314\214E@\000\000\000\000\000\000\"@\000\000\000\000\000\000B@\000\000\000\000\000\0002@\000\000\000\000\000\0001@\000\000\000\000\000\0000@\315\314\314\314\314\014B@\000\000\000\000\000\000?@\000\000\000\000\000\000/@\000\000\000\000\000\300D@\000\000\000\000\000\0001@\232\231\231\231\231\2314@\000\000\000\000\000\000*@fffff&A@\000\000\000\000\000\000=@\315\314\314\314\314\3143@\000\000\000\000\000\0007@\000\000\000\000\000\0009@fffff\3460@\232\231\231\231\231YA@\000\000\000\000\000\0008@33333\2637@ffffff<@\315\314\314\314\314\214A@\000\000\000\000\000\0000@\000\000\000\000\000\0009@\000\000\000\000\000\000?@\232\231\231\231\231\031@@\000\000\000\000\000\000.@\000\000\000\000\000\000=@\000\000\000\000\000\200?@\000\000\000\000\000\2000@\315\314\314\314\314\314<@\000\000\000\000\000\0009@\000\000\000\000\000\0006@\000\000\000\000\000\200@@\000\000\000\000\000\0009@\315\314\314\314\314\3147@\000\000\000\000\000\000;@\000\000\000\000\000\000*@\000\000\000\000\000\000A@\000\000\000\000\000\0003@\000\000\000\000\000\0002@3333334@ffffff9@\000\000\000\000\000\000=@\000\000\000\000\000\200A@\232\231\231\231\231\031A@\000\000\000\000\000\200>@\000\000\000\000\000\000;@\000\000\000\000\000\0002@\000\000\000\000\000\0000@\000\000\000\000\000\000*@\000\000\000\000\000\0003@\000\000\000\000\000\300@@\000\000\000\000\000\0002@\000\000\000\000\000\0005@\000\000\000\000\000\0006@\000\000\000\000\000\2004@\000\000\000\000\000\0004@\000\000\000\000\000\0002@\000\000\000\000\000\000<@\000\000\000\000\000\0005@\000\000\000\000\000\000*@\315\314\314\314\314L?@\232\231\231\231\231\231B@\000\000\000\000\000\000.@\000\000\000\000\000\200B@\000\000\000\000\000\0002@\000\000\000\000\000\000.@fffffffffff9@\000\000\000\000\000\000*@\000\000\000\000\000\000.@\000\000\000\000\000\0001@fffff\346;@\000\000\000\000\000\0007@\000\000\000\000\000\0008@fffff\3463@\000\000\000\000\000\300@@\000\000\000\000\000\2000@\000\000\000\000\000\000;@ffffffs@@\000\000\000\000\000\000<@\000\000\000\000\000\000:@\315\314\314\314\314\014C@\000\000\000\000\000\2009@\000\000\000\000\000\000<@333333;@\000\000\000\000\000\000*@\000\000\000\000\000\000,@\000\000\000\000\000\0002@\000\000\000\000\000\000*@\000\000\000\000\000\0002@\000\000\000\000\000\000$@\000\000\000\000\000\2004@\000\000\000\000\000\0002@\000\000\000\000\000\000.@\000\000\000\000\000\000?@\000\000\000\000\000\000=@3333334@\000\000\000\000\000\000B@\000\000\000\000\000\000,@\000\000\000\000\000\0007@\000\000\000\000\000\000,@\000\000\000\000\000@A@\000\000\000\000\000\0000@\000\000\000\000\000\000?@\232\231\231\231\231\2312@\315\314\314\314\314L4@\000\000\000\000\000\0003@\000\000\000\000\000\0000@\000\000\000\000\000\000*@3333333@\000\000\000\000\000\000.@\000\000\000\000\000\000:@\000\000\000\000\000\000&@\000\000\000\000\000\0006@\000\000\000\000\000\000(@\000\000\000\000\000\0009@ffffff3@\232\231\231\231\231\231?@\000\000\000\000\000\000,@\000\000\000\000\000\000(@\000\000\000\000\000\000B@\000\000\000\000\000\2002@\000\000\000\000\000\000C@\000\000\000\000\000\200@@\232\231\231\231\231\0312@\000\000\000\000\000\0004@\315\314\314\314\314\214C@\000\000\000\000\000\2001@33333\263E@\000\000\000\000\000\200>@\000\000\000\000\000\000(@\000\000\000\000\000\000=@\232\231\231\231\231\0313@\000\000\000\000\000\2001@\000\000\000\000\000\000>@\000\000\000\000\000\0002@\000\000\000\000\000\000.@\000\000\000\000\000\000=@fffff\346>@\000\000\000\000\000\2005@\000\000\000\000\000\0004@\000\000\000\000\000\000.@333333B@33333\263>@\000\000\000\000\000\0003@\000\000\000\000\000\0005@3333338@\000\000\000\000\000\000@@\000\000\000\000\000\000:@\315\314\314\314\314LG@\315\314\314\314\314\314:@\000\000\000\000\000\0004@\000\000\000\000\000\000.@\000\000\000\000\000\2006@fffff&F@\000\000\000\000\000\000;@\000\000\000\000\000\000>@\232\231\231\231\231\231:@\000\000\000\000\000\0006@\000\000\000\000\000\000,@\000\000\000\000\000\0005@ffffff;@\000\000\000\000\000\000-@\000\000\000\000\000\000.@\000\000\000\000\000\000:@\000\000\000\000\000\000<@\000\000\000\000\000\000*@333333@@\000\000\000\000\000\000/@\000\000\000\000\000\000?@fffff\346@@fffff\346?@\000\000\000\000\000\000*@\232\231\231\231\231\0315@fffff\3467@\315\314\314\314\314\314=@\000\000\000\000\000\000<@\000\000\000\000\000\000:@\000\000\000\000\000\000,@\000\000\000\000\000\000@@\000\000\000\000\000\2001@\000\000\000\000\000\0008@ffffff:@fffff\246B@\232\231\231\231\231\0319@"
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 8
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "BatchDatasetV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "ram_budget"
    value {
      i: 0
    }
  }
}
node {
  name: "optimizations_enabled"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizations_disabled"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizations_default"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 4
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "map_parallelization"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDatasetV2"
  op: "OptimizeDatasetV2"
  input: "ModelDataset"
  input: "optimizations_enabled"
  input: "optimizations_disabled"
  input: "optimizations_default"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "autotune_buffer_sizes:autotune:true"
        s: "batch_parallelization:autotune:true"
        s: "disable_prefetch_legacy_autotune:autotune:true"
        s: "enable_gradient_descent:autotune:true"
        s: "map_parallelization:autotune:true"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "OptimizeDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Bucketize"
  op: "Bucketize"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "boundaries"
    value {
      list {
        f: 73.0
        f: 76.0
        f: 79.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Cast_1"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Bucketize"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/Const"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/ignore_value"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/indices"
  op: "Where"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/values"
  op: "GatherNd"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/dense_shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range"
  op: "Range"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range/start"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Size"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_867c6310-3d14-412e-9297-f5c3cf117440"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/Cast"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/hash_table"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/values"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/SparseToDense"
  op: "SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/indices"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/to_sparse_input/dense_shape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/hash_table_Lookup/LookupTableFindV2"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot"
  op: "OneHot"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/SparseToDense"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/depth"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/Const"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Sum"
  op: "Sum"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/one_hot"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Sum"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/Acceleration_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Cylinders_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Displacement_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Horsepower_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/ModelYear_bucketized_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/Weight_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.36927446722984314
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.36927446722984314
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_219"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_218"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.37796446681022644
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.37796446681022644
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_289"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_288"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_358"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_357"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/Cast"
  op: "Cast"
  input: "head/losses/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/mean_squared_error/Cast/x"
  op: "Const"
  input: "^head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adagrad/gradients/gradients/Shape"
  input: "training/Adagrad/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adagrad/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adagrad/gradients/gradients/grad_ys_0"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "training/Adagrad/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/Cast"
  input: "^training/Adagrad/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "training/Adagrad/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adagrad/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adagrad/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adagrad/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adagrad/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adagrad/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/decay"
    }
  }
}
node {
  name: "training/Adagrad/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/decay"
  input: "training/Adagrad/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adagrad/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "training/Adagrad/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adagrad/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/learning_rate"
    }
  }
}
node {
  name: "training/Adagrad/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/learning_rate"
  input: "training/Adagrad/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/kernel/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/kernel/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/logits/kernel/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/kernel/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/kernel/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  input: "training/Adagrad/dnn/logits/kernel/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/kernel/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/bias/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/bias/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adagrad/dnn/logits/bias/accumulator"
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/bias/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/bias/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  input: "training/Adagrad/dnn/logits/bias/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/dnn/logits/bias/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adagrad/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adagrad/Identity"
  op: "Identity"
  input: "training/Adagrad/Identity/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adagrad/Neg"
  op: "Neg"
  input: "training/Adagrad/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adagrad/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/hiddenlayer_0/bias/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/hiddenlayer_1/bias/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/logits/kernel/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/logits/kernel"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/update_dnn/logits/bias/ResourceApplyAdagradV2"
  op: "ResourceApplyAdagradV2"
  input: "dnn/logits/bias"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  input: "training/Adagrad/Identity"
  input: "training/Adagrad/Const"
  input: "training/Adagrad/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/group_deps"
  op: "NoOp"
  input: "^training/Adagrad/Adagrad/update_dnn/hiddenlayer_0/bias/ResourceApplyAdagradV2"
  input: "^training/Adagrad/Adagrad/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdagradV2"
  input: "^training/Adagrad/Adagrad/update_dnn/hiddenlayer_1/bias/ResourceApplyAdagradV2"
  input: "^training/Adagrad/Adagrad/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdagradV2"
  input: "^training/Adagrad/Adagrad/update_dnn/logits/bias/ResourceApplyAdagradV2"
  input: "^training/Adagrad/Adagrad/update_dnn/logits/kernel/ResourceApplyAdagradV2"
}
node {
  name: "training/Adagrad/Adagrad/Const"
  op: "Const"
  input: "^training/Adagrad/Adagrad/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adagrad/Adagrad/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adagrad/Adagrad/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adagrad/Adagrad/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adagrad/decay/Assign"
  input: "^training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Assign"
  input: "^training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Assign"
  input: "^training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Assign"
  input: "^training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Assign"
  input: "^training/Adagrad/dnn/logits/bias/accumulator/Assign"
  input: "^training/Adagrad/dnn/logits/kernel/accumulator/Assign"
  input: "^training/Adagrad/learning_rate/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 15
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adagrad/decay"
        string_val: "training/Adagrad/learning_rate"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
        string_val: "training/Adagrad/dnn/logits/kernel/accumulator"
        string_val: "training/Adagrad/dnn/logits/bias/accumulator"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 15
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adagrad/decay"
        string_val: "training/Adagrad/learning_rate"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
        string_val: "training/Adagrad/dnn/logits/kernel/accumulator"
        string_val: "training/Adagrad/dnn/logits/bias/accumulator"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^dnn/input_from_feature_columns/input_layer/Origin_indicator_1/Origin_lookup/hash_table/table_init/LookupTableImportV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp/part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adagrad/decay"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
        string_val: "training/Adagrad/dnn/logits/bias/accumulator"
        string_val: "training/Adagrad/dnn/logits/kernel/accumulator"
        string_val: "training/Adagrad/learning_rate"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adagrad/decay/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator/Read/ReadVariableOp"
  input: "training/Adagrad/learning_rate/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adagrad/decay"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
        string_val: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
        string_val: "training/Adagrad/dnn/logits/bias/accumulator"
        string_val: "training/Adagrad/dnn/logits/kernel/accumulator"
        string_val: "training/Adagrad/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 15
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adagrad/decay"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/bias/accumulator"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_0/kernel/accumulator"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/bias/accumulator"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/hiddenlayer_1/kernel/accumulator"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/logits/bias/accumulator"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adagrad/dnn/logits/kernel/accumulator"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adagrad/learning_rate"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_218"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 32
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 32
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_219"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 32
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 32
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_41"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_288"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_289"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_357"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_42"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_358"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 716
  min_consumer: 12
}
